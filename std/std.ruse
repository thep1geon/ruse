(do
  (define else t)

  (define ! (lambda (a) 
              (cond
                (a f)
                (else t))))

  (define and (lambda (a b) 
                (cond
                  ((! a) f)
                  ((! b) f)
                  (else t))))

  (define or (lambda (a b) 
               (! (and (! a) (! b)))))

  (define > (lambda (a b) 
              (< b a)))

  (define = (lambda (a b) 
              (! (or (> a b) (< a b)))))

  (define <= (lambda (a b) 
               (or (= a b) (< a b))))

  (define >= (lambda (a b) 
               (<= b a)))

  (define != (lambda (a b) 
               (! (= a b))))

  (define zero? (lambda (x) 
                  (= 0 x)))

  (define ~ (lambda (x) (- 0 x)))
  (define -- (lambda (x) (- x 1)))
  (define ++ (lambda (x) (+ x 1)))


  (define fact (lambda (x) 
                 (if (<= x 1) 
                   1 
                   (* x (fact (-- x))))))

  (define length (lambda (xs)
                   (if xs
                    (+ 1 (length (cdr xs)))
                    0)))

  (define empty? (lambda (xs)
                   (= (length xs) 0)))

  (define max (lambda (a b) (if (> a b) a b)))

  (define min (lambda (a b) (if (< a b) a b)))
    
  (define range (lambda (min max)
                  (cond
                    ((< min max) (cons min (range (++ min) max)))
                    (else (list)))))

  (define filter (lambda (fn xs) 
                    (cond
                      ((empty? xs) (list))

                      ((fn (car xs)) 
                        (cons (car xs) (filter fn (cdr xs))))

                      (else (filter fn (cdr xs))))))

  (define !rev (lambda (xs acc)
                (if xs
                  (!rev (cdr xs) (cons (car xs) acc))
                  acc)))

  (define rev (lambda (xs) (!rev xs (list))))

  (define map (lambda (fn xs)
                (if (empty? xs)
                  (list)
                  (cons (fn (car xs)) (map fn (cdr xs))))))

  (define even? (lambda (x) (= (% x 2) 0)))
  (define odd? (lambda (x) (! (even? x))))

  (define nth (lambda (xs n) 
                 (if (= n 0)
                   (car xs)
                   (nth (cdr xs) (-- n)))))

  (define last (lambda (xs)
                 (cond 
                   ((empty? xs) nil)
                   ((= 1 (length xs)) (car xs))
                   (else (last (cdr xs))))))

  (define x (let ((x 8)
                (y 4))
            (cond
              ((= x y) (- x y))
              ((> x y) (range y x))
              (else "Lt")
            )

    ))
)
